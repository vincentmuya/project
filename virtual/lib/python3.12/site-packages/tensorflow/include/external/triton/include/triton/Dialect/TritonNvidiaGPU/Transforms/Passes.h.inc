/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_TRITONGPUFENCEINSERTION
#define GEN_PASS_DECL_TRITONGPUPLANCTAPASS
#define GEN_PASS_DECL_TRITONNVIDIAGPUTMALOWERINGPASS
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// TritonGPUFenceInsertion
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONGPUFENCEINSERTION
struct TritonGPUFenceInsertionOptions {
  int32_t computeCapability = 90;
};
#undef GEN_PASS_DECL_TRITONGPUFENCEINSERTION
#endif // GEN_PASS_DECL_TRITONGPUFENCEINSERTION
#ifdef GEN_PASS_DEF_TRITONGPUFENCEINSERTION
namespace impl {

template <typename DerivedT>
class TritonGPUFenceInsertionBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUFenceInsertionBase;

  TritonGPUFenceInsertionBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUFenceInsertionBase(const TritonGPUFenceInsertionBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonGPUFenceInsertionBase& operator=(const TritonGPUFenceInsertionBase &) = delete;
  TritonGPUFenceInsertionBase(TritonGPUFenceInsertionBase &&) = delete;
  TritonGPUFenceInsertionBase& operator=(TritonGPUFenceInsertionBase &&) = delete;
  ~TritonGPUFenceInsertionBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-fence-insertion");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-fence-insertion"; }

  ::llvm::StringRef getDescription() const override { return "Insert fences across generic and async proxy"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUFenceInsertion");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUFenceInsertion"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUFenceInsertionBase<DerivedT>)

  TritonGPUFenceInsertionBase(const TritonGPUFenceInsertionOptions &options) : TritonGPUFenceInsertionBase() {
    computeCapability = options.computeCapability;
  }
protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(90)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONGPUFENCEINSERTION
#endif // GEN_PASS_DEF_TRITONGPUFENCEINSERTION

//===----------------------------------------------------------------------===//
// TritonGPUPlanCTAPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONGPUPLANCTAPASS
#undef GEN_PASS_DECL_TRITONGPUPLANCTAPASS
#endif // GEN_PASS_DECL_TRITONGPUPLANCTAPASS
#ifdef GEN_PASS_DEF_TRITONGPUPLANCTAPASS
namespace impl {

template <typename DerivedT>
class TritonGPUPlanCTAPassBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUPlanCTAPassBase;

  TritonGPUPlanCTAPassBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUPlanCTAPassBase(const TritonGPUPlanCTAPassBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonGPUPlanCTAPassBase& operator=(const TritonGPUPlanCTAPassBase &) = delete;
  TritonGPUPlanCTAPassBase(TritonGPUPlanCTAPassBase &&) = delete;
  TritonGPUPlanCTAPassBase& operator=(TritonGPUPlanCTAPassBase &&) = delete;
  ~TritonGPUPlanCTAPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-plan-cta");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-plan-cta"; }

  ::llvm::StringRef getDescription() const override { return "plan CTA"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUPlanCTAPass");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUPlanCTAPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUPlanCTAPassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONGPUPLANCTAPASS
#endif // GEN_PASS_DEF_TRITONGPUPLANCTAPASS

//===----------------------------------------------------------------------===//
// TritonNvidiaGPUTMALoweringPass
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONNVIDIAGPUTMALOWERINGPASS
#undef GEN_PASS_DECL_TRITONNVIDIAGPUTMALOWERINGPASS
#endif // GEN_PASS_DECL_TRITONNVIDIAGPUTMALOWERINGPASS
#ifdef GEN_PASS_DEF_TRITONNVIDIAGPUTMALOWERINGPASS
namespace impl {

template <typename DerivedT>
class TritonNvidiaGPUTMALoweringPassBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonNvidiaGPUTMALoweringPassBase;

  TritonNvidiaGPUTMALoweringPassBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonNvidiaGPUTMALoweringPassBase(const TritonNvidiaGPUTMALoweringPassBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonNvidiaGPUTMALoweringPassBase& operator=(const TritonNvidiaGPUTMALoweringPassBase &) = delete;
  TritonNvidiaGPUTMALoweringPassBase(TritonNvidiaGPUTMALoweringPassBase &&) = delete;
  TritonNvidiaGPUTMALoweringPassBase& operator=(TritonNvidiaGPUTMALoweringPassBase &&) = delete;
  ~TritonNvidiaGPUTMALoweringPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-tma-lowering");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-tma-lowering"; }

  ::llvm::StringRef getDescription() const override { return "lower to TMA load/store operations"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonNvidiaGPUTMALoweringPass");
  }
  ::llvm::StringRef getName() const override { return "TritonNvidiaGPUTMALoweringPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonNvidiaGPUTMALoweringPassBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONNVIDIAGPUTMALOWERINGPASS
#endif // GEN_PASS_DEF_TRITONNVIDIAGPUTMALOWERINGPASS
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// TritonGPUFenceInsertion Registration
//===----------------------------------------------------------------------===//

inline void registerTritonGPUFenceInsertion() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUFenceInsertionPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonGPUFenceInsertionPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUFenceInsertionPass();
  });
}

//===----------------------------------------------------------------------===//
// TritonGPUPlanCTAPass Registration
//===----------------------------------------------------------------------===//

inline void registerTritonGPUPlanCTAPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUPlanCTAPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonGPUPlanCTAPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUPlanCTAPass();
  });
}

//===----------------------------------------------------------------------===//
// TritonNvidiaGPUTMALoweringPass Registration
//===----------------------------------------------------------------------===//

inline void registerTritonNvidiaGPUTMALoweringPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUTMALoweringPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonNvidiaGPUTMALoweringPassPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createTritonNvidiaGPUTMALoweringPass();
  });
}

//===----------------------------------------------------------------------===//
// TritonNvidiaGPU Registration
//===----------------------------------------------------------------------===//

inline void registerTritonNvidiaGPUPasses() {
  registerTritonGPUFenceInsertion();
  registerTritonGPUPlanCTAPass();
  registerTritonNvidiaGPUTMALoweringPass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class TritonGPUFenceInsertionBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUFenceInsertionBase;

  TritonGPUFenceInsertionBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUFenceInsertionBase(const TritonGPUFenceInsertionBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonGPUFenceInsertionBase& operator=(const TritonGPUFenceInsertionBase &) = delete;
  TritonGPUFenceInsertionBase(TritonGPUFenceInsertionBase &&) = delete;
  TritonGPUFenceInsertionBase& operator=(TritonGPUFenceInsertionBase &&) = delete;
  ~TritonGPUFenceInsertionBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-fence-insertion");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-fence-insertion"; }

  ::llvm::StringRef getDescription() const override { return "Insert fences across generic and async proxy"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUFenceInsertion");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUFenceInsertion"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUFenceInsertionBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(90)};
};

template <typename DerivedT>
class TritonGPUPlanCTAPassBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonGPUPlanCTAPassBase;

  TritonGPUPlanCTAPassBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonGPUPlanCTAPassBase(const TritonGPUPlanCTAPassBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonGPUPlanCTAPassBase& operator=(const TritonGPUPlanCTAPassBase &) = delete;
  TritonGPUPlanCTAPassBase(TritonGPUPlanCTAPassBase &&) = delete;
  TritonGPUPlanCTAPassBase& operator=(TritonGPUPlanCTAPassBase &&) = delete;
  ~TritonGPUPlanCTAPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-gpu-plan-cta");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-gpu-plan-cta"; }

  ::llvm::StringRef getDescription() const override { return "plan CTA"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonGPUPlanCTAPass");
  }
  ::llvm::StringRef getName() const override { return "TritonGPUPlanCTAPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonGPUPlanCTAPassBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TritonNvidiaGPUTMALoweringPassBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonNvidiaGPUTMALoweringPassBase;

  TritonNvidiaGPUTMALoweringPassBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonNvidiaGPUTMALoweringPassBase(const TritonNvidiaGPUTMALoweringPassBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  TritonNvidiaGPUTMALoweringPassBase& operator=(const TritonNvidiaGPUTMALoweringPassBase &) = delete;
  TritonNvidiaGPUTMALoweringPassBase(TritonNvidiaGPUTMALoweringPassBase &&) = delete;
  TritonNvidiaGPUTMALoweringPassBase& operator=(TritonNvidiaGPUTMALoweringPassBase &&) = delete;
  ~TritonNvidiaGPUTMALoweringPassBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-nvidia-tma-lowering");
  }
  ::llvm::StringRef getArgument() const override { return "triton-nvidia-tma-lowering"; }

  ::llvm::StringRef getDescription() const override { return "lower to TMA load/store operations"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonNvidiaGPUTMALoweringPass");
  }
  ::llvm::StringRef getName() const override { return "TritonNvidiaGPUTMALoweringPass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonNvidiaGPUTMALoweringPassBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
