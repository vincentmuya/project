/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_CONVERTTRITONGPUTOLLVM
#define GEN_PASS_DECL_DECOMPOSEUNSUPPORTEDNVIDIACONVERSIONS
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// ConvertTritonGPUToLLVM
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_CONVERTTRITONGPUTOLLVM
struct ConvertTritonGPUToLLVMOptions {
  int32_t computeCapability = 80;
};
#undef GEN_PASS_DECL_CONVERTTRITONGPUTOLLVM
#endif // GEN_PASS_DECL_CONVERTTRITONGPUTOLLVM
#ifdef GEN_PASS_DEF_CONVERTTRITONGPUTOLLVM
namespace impl {

template <typename DerivedT>
class ConvertTritonGPUToLLVMBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = ConvertTritonGPUToLLVMBase;

  ConvertTritonGPUToLLVMBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  ConvertTritonGPUToLLVMBase(const ConvertTritonGPUToLLVMBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  ConvertTritonGPUToLLVMBase& operator=(const ConvertTritonGPUToLLVMBase &) = delete;
  ConvertTritonGPUToLLVMBase(ConvertTritonGPUToLLVMBase &&) = delete;
  ConvertTritonGPUToLLVMBase& operator=(ConvertTritonGPUToLLVMBase &&) = delete;
  ~ConvertTritonGPUToLLVMBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-triton-gpu-to-llvm");
  }
  ::llvm::StringRef getArgument() const override { return "convert-triton-gpu-to-llvm"; }

  ::llvm::StringRef getDescription() const override { return "Convert TritonGPU to LLVM"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ConvertTritonGPUToLLVM");
  }
  ::llvm::StringRef getName() const override { return "ConvertTritonGPUToLLVM"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::arith::ArithDialect>();
    registry.insert<mlir::math::MathDialect>();
    registry.insert<mlir::gpu::GPUDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::LLVM::LLVMDialect>();
    registry.insert<mlir::tensor::TensorDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
    registry.insert<mlir::NVVM::NVVMDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ConvertTritonGPUToLLVMBase<DerivedT>)

  ConvertTritonGPUToLLVMBase(const ConvertTritonGPUToLLVMOptions &options) : ConvertTritonGPUToLLVMBase() {
    computeCapability = options.computeCapability;
  }
protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(80)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_CONVERTTRITONGPUTOLLVM
#endif // GEN_PASS_DEF_CONVERTTRITONGPUTOLLVM

//===----------------------------------------------------------------------===//
// DecomposeUnsupportedNVIDIAConversions
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_DECOMPOSEUNSUPPORTEDNVIDIACONVERSIONS
#undef GEN_PASS_DECL_DECOMPOSEUNSUPPORTEDNVIDIACONVERSIONS
#endif // GEN_PASS_DECL_DECOMPOSEUNSUPPORTEDNVIDIACONVERSIONS
#ifdef GEN_PASS_DEF_DECOMPOSEUNSUPPORTEDNVIDIACONVERSIONS
namespace impl {

template <typename DerivedT>
class DecomposeUnsupportedNVIDIAConversionsBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = DecomposeUnsupportedNVIDIAConversionsBase;

  DecomposeUnsupportedNVIDIAConversionsBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  DecomposeUnsupportedNVIDIAConversionsBase(const DecomposeUnsupportedNVIDIAConversionsBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  DecomposeUnsupportedNVIDIAConversionsBase& operator=(const DecomposeUnsupportedNVIDIAConversionsBase &) = delete;
  DecomposeUnsupportedNVIDIAConversionsBase(DecomposeUnsupportedNVIDIAConversionsBase &&) = delete;
  DecomposeUnsupportedNVIDIAConversionsBase& operator=(DecomposeUnsupportedNVIDIAConversionsBase &&) = delete;
  ~DecomposeUnsupportedNVIDIAConversionsBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("decompose-unsupported-nvidia-conversions");
  }
  ::llvm::StringRef getArgument() const override { return "decompose-unsupported-nvidia-conversions"; }

  ::llvm::StringRef getDescription() const override { return "Decompose conversions that are not supported by TritonGPU -> LLVM"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("DecomposeUnsupportedNVIDIAConversions");
  }
  ::llvm::StringRef getName() const override { return "DecomposeUnsupportedNVIDIAConversions"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(DecomposeUnsupportedNVIDIAConversionsBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_DECOMPOSEUNSUPPORTEDNVIDIACONVERSIONS
#endif // GEN_PASS_DEF_DECOMPOSEUNSUPPORTEDNVIDIACONVERSIONS
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// ConvertTritonGPUToLLVM Registration
//===----------------------------------------------------------------------===//

inline void registerConvertTritonGPUToLLVM() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::triton::createConvertTritonGPUToLLVMPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerConvertTritonGPUToLLVMPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::triton::createConvertTritonGPUToLLVMPass();
  });
}

//===----------------------------------------------------------------------===//
// DecomposeUnsupportedNVIDIAConversions Registration
//===----------------------------------------------------------------------===//

inline void registerDecomposeUnsupportedNVIDIAConversions() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::triton::NVIDIA::createDecomposeUnsupportedConversionsPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerDecomposeUnsupportedNVIDIAConversionsPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::triton::NVIDIA::createDecomposeUnsupportedConversionsPass();
  });
}

//===----------------------------------------------------------------------===//
// TritonNVIDIAGPUToLLVM Registration
//===----------------------------------------------------------------------===//

inline void registerTritonNVIDIAGPUToLLVMPasses() {
  registerConvertTritonGPUToLLVM();
  registerDecomposeUnsupportedNVIDIAConversions();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class ConvertTritonGPUToLLVMBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = ConvertTritonGPUToLLVMBase;

  ConvertTritonGPUToLLVMBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  ConvertTritonGPUToLLVMBase(const ConvertTritonGPUToLLVMBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  ConvertTritonGPUToLLVMBase& operator=(const ConvertTritonGPUToLLVMBase &) = delete;
  ConvertTritonGPUToLLVMBase(ConvertTritonGPUToLLVMBase &&) = delete;
  ConvertTritonGPUToLLVMBase& operator=(ConvertTritonGPUToLLVMBase &&) = delete;
  ~ConvertTritonGPUToLLVMBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-triton-gpu-to-llvm");
  }
  ::llvm::StringRef getArgument() const override { return "convert-triton-gpu-to-llvm"; }

  ::llvm::StringRef getDescription() const override { return "Convert TritonGPU to LLVM"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ConvertTritonGPUToLLVM");
  }
  ::llvm::StringRef getName() const override { return "ConvertTritonGPUToLLVM"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::arith::ArithDialect>();
    registry.insert<mlir::math::MathDialect>();
    registry.insert<mlir::gpu::GPUDialect>();
    registry.insert<mlir::scf::SCFDialect>();
    registry.insert<mlir::LLVM::LLVMDialect>();
    registry.insert<mlir::tensor::TensorDialect>();
    registry.insert<mlir::triton::TritonDialect>();
    registry.insert<mlir::triton::gpu::TritonGPUDialect>();
    registry.insert<mlir::triton::nvidia_gpu::TritonNvidiaGPUDialect>();
    registry.insert<mlir::NVVM::NVVMDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ConvertTritonGPUToLLVMBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(80)};
};

template <typename DerivedT>
class DecomposeUnsupportedNVIDIAConversionsBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = DecomposeUnsupportedNVIDIAConversionsBase;

  DecomposeUnsupportedNVIDIAConversionsBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  DecomposeUnsupportedNVIDIAConversionsBase(const DecomposeUnsupportedNVIDIAConversionsBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}
  DecomposeUnsupportedNVIDIAConversionsBase& operator=(const DecomposeUnsupportedNVIDIAConversionsBase &) = delete;
  DecomposeUnsupportedNVIDIAConversionsBase(DecomposeUnsupportedNVIDIAConversionsBase &&) = delete;
  DecomposeUnsupportedNVIDIAConversionsBase& operator=(DecomposeUnsupportedNVIDIAConversionsBase &&) = delete;
  ~DecomposeUnsupportedNVIDIAConversionsBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("decompose-unsupported-nvidia-conversions");
  }
  ::llvm::StringRef getArgument() const override { return "decompose-unsupported-nvidia-conversions"; }

  ::llvm::StringRef getDescription() const override { return "Decompose conversions that are not supported by TritonGPU -> LLVM"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("DecomposeUnsupportedNVIDIAConversions");
  }
  ::llvm::StringRef getName() const override { return "DecomposeUnsupportedNVIDIAConversions"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(DecomposeUnsupportedNVIDIAConversionsBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
